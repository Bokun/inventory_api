import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain
import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator


buildscript {
    ext {
        awsVersion = '1.11.283'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("com.amazonaws:aws-java-sdk-core:${awsVersion}")
        classpath("com.amazonaws:aws-java-sdk-s3:${awsVersion}")
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath 'io.swagger:swagger-codegen:2.2.3'
    }
}

group 'io.bokun.inventory'
version '0.4.1.0'

apply plugin: "com.google.protobuf"
apply plugin: "java"
apply plugin: "application"
apply plugin: "idea"
apply plugin: "maven-publish"

def commonArtifact = 'common-api'
def pluginArtifact = 'plugin-api'
def serviceArtifact = 'service-api'

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.5.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.11.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

def swaggerInput = "src/main/swagger/inventory_api.json"
def swaggerOutputDir = file('src/generated/main/java')
task generateApi {
    inputs.file(swaggerInput)
        outputs.dir(swaggerOutputDir)
        doLast {
            def config = new CodegenConfigurator()
            config.setInputSpec(swaggerInput)
            config.setOutputDir(swaggerOutputDir.path)
            config.setLang('java')
            config.setAdditionalProperties([
                    'invokerPackage'   : 'io.bokun.inventory.plugin.api.rest',
                    'modelPackage'     : 'io.bokun.inventory.plugin.api.rest',
                    'apiPackage'       : 'io.bokun.inventory.plugin.api.rest',
                    'dateLibrary'      : 'java8',
                    'hideGenerationTimestamp' : 'true',
                    'sourceFolder': '.'
            ])
            config.setSystemProperties([
                    'modelTests': 'false',
                    'modelDocs': 'false',
                    'apiTests': 'false',
                    'apiDocs': 'false',
                    'models' : ''
            ])
            new DefaultGenerator().opts(config.toClientOptInput()).generate()
        }
}

clean.doFirst {
    delete(swaggerOutputDir)
}

configurations {
    swagger
}

sourceSets {
    swagger {
        compileClasspath = configurations.swaggerCompile
        java {
            srcDir file("/src/generated/main/java")
        }
    }
    main {
        proto {
            srcDir 'src/main/proto_common'
            srcDir 'src/main/proto_plugin'
            srcDir 'src/main/proto_service'
        }
        compileClasspath += swagger.output
        runtimeClasspath += swagger.output
    }
}

dependencies {
    compile 'io.grpc:grpc-all:1.11.0'
    compile 'io.swagger:swagger-annotations:1.5.19'
}

compileSwaggerJava.dependsOn generateApi
classes.dependsOn swaggerClasses
compileJava.dependsOn compileSwaggerJava

sourceCompatibility = 1.8
targetCompatibility = 1.8

// This thingie below will ensure all dependencies are always fetched when running from IntelliJ
// It should not be there by default and only uncommented when necessary, followed by IntelliJ Gradle refresh

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'hours'
    resolutionStrategy.cacheChangingModulesFor 0, 'hours'
}

if (project.hasProperty('branch')) {
    println("branch: " + project.property('branch'))
}

AWSCredentials awsCredentials = DefaultAWSCredentialsProviderChain.getInstance().credentials;

repositories {
    maven {
        url "s3://pmr.bokun.io/snapshots"
        credentials(AwsCredentials) {
            accessKey awsCredentials.AWSAccessKeyId
            secretKey awsCredentials.AWSSecretKey
        }
    }
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "s3://pmr.bokun.io/release"
        credentials(AwsCredentials) {
            accessKey awsCredentials.AWSAccessKeyId
            secretKey awsCredentials.AWSSecretKey
        }
    }
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java");
        sourceDirs += file("${projectDir}/src/generated/main/grpc");
    }
}

startScripts.enabled = false

task commonApi(type: Jar) {
    baseName = 'commonapi'
    from sourceSets.main.output.classesDir
    include 'io/bokun/inventory/common/**', 'io/bokun/inventory/plugin/api/rest/**', 'io/bokun/inventory/util/**'
}

task pluginApi(type: Jar) {
    baseName = 'pluginapi'
    from sourceSets.main.output.classesDir
    from sourceSets.swagger.output.classesDir
    include 'io/bokun/inventory/plugin/**'
}

task serviceApi(type: Jar) {
    baseName = 'serviceapi'
    from sourceSets.main.output.classesDir
    from sourceSets.swagger.output.classesDir
    include 'io/bokun/inventory/service/**', 'grpc/health/v1/**'
}

if (awsCredentials != null) {
    println("publish : " + awsCredentials.AWSAccessKeyId)
    publishing {
        println "Will publish to Private S3 repository"
        publications {

            common(MavenPublication) {
                groupId group
                artifactId commonArtifact
                version version
                artifact commonApi
                pom.withXml {
                    asNode().appendNode('description', 'Common GRPC API library for inventory plugin api and inventory service api2')
                }

            }

            plugin(MavenPublication) {
                groupId group
                artifactId pluginArtifact
                version version
                artifact pluginApi

                pom.withXml {
                    asNode().appendNode('description', 'Inventory Service Plugin GRPC API library')

                    def dependenciesNode = asNode().appendNode('dependencies')
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', group)
                    dependencyNode.appendNode('artifactId', commonArtifact)
                    dependencyNode.appendNode('version', version)
                }
            }
            service(MavenPublication) {
                groupId group
                artifactId serviceArtifact
                version version
                artifact serviceApi

                pom.withXml {
                    asNode().appendNode('description', 'Internal Inventory Service GRPC API library')

                    def dependenciesNode = asNode().appendNode('dependencies')
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', group)
                    dependencyNode.appendNode('artifactId', commonArtifact)
                    dependencyNode.appendNode('version', version)
                }
            }
        }
        repositories {
            maven {
                url "s3://pmr.bokun.io/release"
                credentials(AwsCredentials) {
                    accessKey awsCredentials.AWSAccessKeyId
                    secretKey awsCredentials.AWSSecretKey
                }
            }
            maven {
                url "s3://public-pmr.bokun.io/release"
                credentials(AwsCredentials) {
                    accessKey awsCredentials.AWSAccessKeyId
                    secretKey awsCredentials.AWSSecretKey
                }
            }
        }
    }
} else {
    println "AWS Credentials not found."
}
