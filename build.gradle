import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.profile.ProfileCredentialsProvider

group 'io.bokun.inventory'
version '0.1'

def commonArtifact = 'common-api-grpc'
def pluginArtifact = 'plugin-api-grpc'
def serviceArtifact = 'service-api-grpc'

buildscript {
    ext {
        awsVersion = '1.11.40'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("com.amazonaws:aws-java-sdk-core:${awsVersion}")
        classpath("com.amazonaws:aws-java-sdk-s3:${awsVersion}")
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
    }
}

apply plugin: "com.google.protobuf"
apply plugin: "java"
apply plugin: "application"
apply plugin: "idea"
apply plugin: "maven-publish"

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.2.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.2.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

dependencies {
    compile 'io.grpc:grpc-all:1.2.0'
}


sourceSets {
    main {
        proto {
            srcDir 'src/main/proto_common'
            srcDir 'src/main/proto_plugin'
            srcDir 'src/main/proto_service'
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// This thingie below will ensure all dependencies are always fetched when running from IntelliJ
// It should not be there by default and only uncommented when necessary, followed by IntelliJ Gradle refresh

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'hours'
    resolutionStrategy.cacheChangingModulesFor 0, 'hours'
}

def snapshot = '-SNAPSHOT'
if (project.hasProperty('snapshot') && project.property('snapshot') == '-RELEASE') {
    snapshot = ''
}
version += snapshot

AWSCredentials awsCredentials = new ProfileCredentialsProvider().credentials;

repositories {
    maven {
        url "s3://pmr.bokun.io/snapshots"
        credentials(AwsCredentials) {
            accessKey awsCredentials.AWSAccessKeyId
            secretKey awsCredentials.AWSSecretKey
        }
    }
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "s3://pmr.bokun.io/release"
        credentials(AwsCredentials) {
            accessKey awsCredentials.AWSAccessKeyId
            secretKey awsCredentials.AWSSecretKey
        }
    }
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java");
        sourceDirs += file("${projectDir}/src/generated/main/grpc");
    }
}

startScripts.enabled = false

task commonApi(type: Jar) {
    baseName = 'commonapi'
    from sourceSets.main.output.classesDir
    include 'io/bokun/inventory/common/**'
}
task pluginApi(type: Jar) {
    baseName = 'pluginapi'
    from sourceSets.main.output.classesDir
    include 'io/bokun/inventory/plugin/**'
}
task serviceApi(type: Jar) {
    baseName = 'serviceapi'
    from sourceSets.main.output.classesDir
    include 'io/bokun/inventory/service/**'
}

if (awsCredentials != null) {
    println "Will publish to AWS"
    publishing {
        println("publish : " + awsCredentials.AWSAccessKeyId)
        publications {

            common(MavenPublication) {
                groupId group
                artifactId commonArtifact
                version version
                artifact commonApi
                pom.withXml {
                    asNode().appendNode('description', 'Common GRPC API library for inventory plugin api and inventory service api2')
                }

            }

            plugin(MavenPublication) {
                groupId group
                artifactId pluginArtifact
                version version
                artifact pluginApi

                pom.withXml {
                    asNode().appendNode('description', 'Inventory Service Plugin GRPC API library')

                    def dependenciesNode = asNode().appendNode('dependencies')
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', group)
                    dependencyNode.appendNode('artifactId', commonArtifact)
                    dependencyNode.appendNode('version', version)
                }
            }
            service(MavenPublication) {
                groupId group
                artifactId serviceArtifact
                version version
                artifact serviceApi

                pom.withXml {
                    asNode().appendNode('description', 'Internal Inventory Service GRPC API library')

                    def dependenciesNode = asNode().appendNode('dependencies')
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', group)
                    dependencyNode.appendNode('artifactId', commonArtifact)
                    dependencyNode.appendNode('version', version)
                }
            }
        }
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "s3://pmr.bokun.io/snapshots"
                } else {
                    url "s3://pmr.bokun.io/release"
                }
                credentials(AwsCredentials) {
                    accessKey awsCredentials.AWSAccessKeyId
                    secretKey awsCredentials.AWSSecretKey
                }
            }
        }
    }
} else {
    println "AWS Credentials not found."
}