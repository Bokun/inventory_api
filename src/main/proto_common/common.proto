syntax = "proto3";

package io.bokun.inventory.common.api.grpc;

option java_multiple_files = true;
option java_package = "io.bokun.inventory.common.api.grpc";

// to signify that a RPC call doesn't return anything or has no input parameters
message Empty {
}

// All fields mandatory
message Date {
    int32 year = 1;
    int32 month = 2;
    int32 day = 3;
}

// Date period - from one day to another. Boundary conditions (exclusive or not) are defined at the context where this period is used.
// All fields mandatory
message DatePeriod {
    Date from = 1;
    Date to = 2;
}

// All fields mandatory
message Time {
    int32 hour = 1;
    int32 minute = 2;
}

// All fields mandatory
message Price {
    // ISO 4217 currency code (such as USD, EUR, GBP, etc.). Mandatory.
    string currency = 1;

    // Can't use double because of precision loss. Will convert to BigDecimal when data arrives in Java. Mandatory.
    string amount = 2;
}

// Data types for PluginConfigurationParameter
enum PluginParameterDataType {
    UNASSIGNED_PLUGIN_PARAMETER_DATA_TYPE = 0;
    LONG = 1;
    DOUBLE = 2;
    BOOLEAN = 3;
    STRING = 4;
}

// What kind of features/speacial cases does this plugin support?
enum PluginCapability {
    UNASSIGNED_PLUGIN_CAPABILITY = 0;

    // Currently unused.
    SUPPORTS_PRICING = 1;

    // If set, both platform and Inventory Service with make two calls (CreateReservation + ConfirmBooking) - which is the recommended way.
    // Otherwise, one step CreateAndConfirmBooking method will be used.
    // For a plugin, it doesn't make sense to implement both options as only one will be used, depending of presence/absence of this flag.
    SUPPORTS_RESERVATIONS = 2;

    // If enabled, it means that a plugin is able (and required) to respond to availability requests coming from Bokun.
    // Otherwise it is assumed that availability is managed in Bokun silo and no availability query is sent towards plugin. However if a booking is
    // made, the call is still made towards plugin.
    SUPPORTS_AVAILABILITY = 3;
}

// Supported product categories
enum ProductCategory {
    UNASSIGNED_PRODUCT_CATEGORY = 0;
    ACCOMMODATION = 1;
    ACTIVITIES = 2;
    CAR_RENTALS = 3;
    TRANSPORT = 4;
}

enum ExtraPricingType {
    UNASSIGNED_EXTRA_PRICING_TYPE = 0;
    PER_PERSON = 1;
    PER_BOOKING = 2;
}

// All fields mandatory; should at least be set to 0.
message Duration {
    int32 minutes = 1;
    int32 hours = 2;
    int32 days = 3;
    int32 weeks = 4;
}

message OpeningHoursTimeInterval {
    string openFrom = 1;                // Format: HH:mm
    int32 openForHours = 2;             // For how many hours open since openFrom
    int32 openForMinutes = 3;           // For how many minutes open since openFrom. Must be within [0..59]
    Duration duration = 4;              // Specifies the frequency between start times within the interval. For example if duration is 20 minutes, the tour starts every 20 minutes.
}

message OpeningHoursWeekday {
    bool open24Hours = 1;                                   // whether this is open 24/7. If so, other fields are irrelevant.
    repeated OpeningHoursTimeInterval timeIntervals = 2;    // only used if open24Hours is false. Time intervals that are open for this weekday
}

message OpeningHours {
    OpeningHoursWeekday monday = 1;         // Opening hours for Mondays
    OpeningHoursWeekday tuesday = 2;        // Tuesdays, and so on and so forth
    OpeningHoursWeekday wednesday = 3;
    OpeningHoursWeekday thursday = 4;
    OpeningHoursWeekday friday = 5;
    OpeningHoursWeekday saturday = 6;
    OpeningHoursWeekday sunday = 7;
}

message SeasonalOpeningHourSet {
    repeated SeasonalOpeningHours seasonalOpeningHours = 1;
}

message SeasonalOpeningHours {
    int32 startMonth = 1;
    int32 startDay = 2;
    int32 endMonth = 3;
    int32 endDay = 4;
    OpeningHours openingHours = 5;
}

enum BookingType {
    UNASSIGNED_BOOKING_TYPE = 0;
    DATE = 1;
    DATE_AND_TIME = 2;
    PASS = 3;
}

// Rate (either of Bokun or remote system, depends on the context).
message Rate {
    // id for rate. Mandatory.
    string id = 1;

    // Label for rate. Mandatory.
    string label = 2;
}

// Parameters used to configure supported plugin(s)
message PluginConfigurationParameter {
    string name = 1;                        // names should be unique per plugin
    PluginParameterDataType type = 2;
    bool required = 3;
}

// Pricing category of (either of Bokun or remote system, depends on the context).
message PricingCategory {
    // id for pricing category. Mandatory.
    string id = 1;

    // Label for pricing category. Mandatory.
    string label = 2;

    // Least possible age for qualifying for this price category. Optional.
    int32 minAge = 3;

    // Max possible age for qualifying for this price category. Optional.
    int32 maxAge = 4;
}

// A brief information about a product. It is a subset of ProductDescription properties
message BasicProductInfo {
    // Product id of remote system. Mandatory.
    string id = 1;

    // Product name of remote system. Mandatory.
    string name = 2;

    // Product description of remote system. Optional.
    string description = 3;

    // Product categories this product is sold at. Optional - they will be shown for information purposes if set.
    // This refers to pricing categories of the remote system.
    repeated PricingCategory pricingCategories = 4;

    // City name where this product is served at. Optional (if product is not applicable to any city, e.g. Lava Tours).
    // Multiple items means this product is for multiple cities.
    repeated string cities = 5;

    // ISO ALPHA-2 codes. Optional (inventory service may not set any country if plugin returns invalid data).
    // Multiple items means this product is for multiple countries.
    repeated string countries = 6;
}

// Product description of a remote system product.
message ProductDescription {
    // Product id of remote system. Mandatory.
    string id = 1;

    // Product name of remote system. Mandatory.
    string name = 2;

    // Product description of remote system. Optional.
    string description = 3;

    // Product categories this product is sold at. Mandatory, should at least have one element in this collection.
    // This refers to pricing categories of the remote system.
    repeated PricingCategory pricingCategories = 4;

    // Rates this product is sold at. Mandatory, should at least have one element in this collection.
    // This refers to rates of the remote system.
    repeated Rate rates = 5;

    // If a product is available on a daily basis (without having pre-selected set of departure times), it will likely have opening hours,
    // much like a convenience store has a range of hours when it's open. Optional.
    oneof openingHours {
        // Guaranteed to be set if this product is available all year round without exception.
        OpeningHours allYearOpeningHours = 6;

        // Guaranteed to be set if this product is available at different times at different time periods within a year.
        SeasonalOpeningHourSet seasonalOpeningHours = 7;
    }

    // how is this product bookable? Mandatory.
    // -- if DATE, then this product does not have any start times
    // -- if DATE_AND_TIME, then this product is bookable for certain times within available days
    // -- if PASS, then this product is bookable so that participant could consume this product at any given day (providing ticket is not expired)
    BookingType bookingType = 8;

    // Whether customer can be picked up at an arbitrary place, specified during booking process.
    // Mandatory if ::meetingType is MEET_ON_LOCATION_OR_PICK_UP or PICK_UP, otherwise irrelevant/ignored.
    bool customPickupPlaceAllowed = 10;

    // How many minutes somebody should be picked up before the event takes place.
    int32 pickupMinutesBefore = 11;

    // A collection of pre-defined pick up places, supported by vendor.
    // Mandatory (should have at least one entry) if ::meetingType is MEET_ON_LOCATION_OR_PICK_UP or PICK_UP and ::customPickupPlaceAllowed is false.
    repeated PickupDropoffPlace pickupPlaces = 12;

    // Whether drop off is available for this product. Mandatory.
    bool dropoffAvailable = 13;

    // Whether customer can be dropped off at arbitrary place, specified during booking process.
    // Mandatory if ::dropoffAvailable is true, otherwise irrelevant/ignored.
    bool customDropoffPlaceAllowed = 14;

    // A collection of pre-defined drop off places, supported by vendor.
    // Mandatory (should have at least one entry) if ::dropoffAvailable is true and ::customDropoffPlaceAllowed is false.
    repeated PickupDropoffPlace dropoffPlaces = 15;

    // Is this activity, accommodation, etc.? Mandatory.
    ProductCategory productCategory = 16;

    // What kind of tickets does this product support? Mandatory.
    repeated TicketSupport ticketSupport = 17;

    // ISO ALPHA-2 codes. Optional (inventory service may not set any country if plugin returns invalid data).
    // Multiple items means this product is for multiple countries.
    repeated string countries = 18;

    // City name where this product is served at. Optional (if product is not applicable to any city, e.g. Lava Tours).
    // Multiple items means this product is for multiple cities.
    repeated string cities = 19;

    // Start times this product is available at. Mandatory (must have at least one element) if bookingType is DATE_AND_TIME, otherwise ignored.
    repeated Time startTimes = 20;

    // What kind of tickets does this product generate? Should be set by the plugin unless <tt>ticketSupport==TICKETS_NOT_REQUIRED</tt>
    TicketType ticketType = 21;

    // What kind of meeting type the product uses. Mandatory.
    MeetingType meetingType = 22;

    // A list of lead customer fields this particular product requires. Optional (none will be enforced if omitted).
    repeated ContactField enforcedLeadPassengerFields = 23;

    // A list of traveller fields this particular product requires. Optional (none will be enforced if omitted).
    repeated ContactField enforcedTravellerFields = 24;

    // Extras which belong to this product. Optional.
    repeated Extra extras = 25;

}

// A list of all possible ticketing options for a product.
enum TicketSupport {
    // Should not be used explicitly.
    UNASSIGNED_TICKET_SUPPORT = 0;

    // Request to issue a ticket per each passenger when booking.
    TICKET_PER_PERSON = 1;

    // Request to issue a single ticket for all passengers when booking.
    TICKET_PER_BOOKING = 2;

    // No tickets required. Should be used when 3rd party does not require, provide or support tickets.
    TICKETS_NOT_REQUIRED = 3;
}

// QR Code type: https://en.wikipedia.org/wiki/QR_code
message QrTicket {
    // String which is used to generate barcode from. Mandatory.
    string ticketBarcode = 1;

    // String which may be used to verify ticket manually in case if there is no connection for QR code scanner. Optional.
    string offlineCode = 2;
}

// Data Matrix type: https://en.wikipedia.org/wiki/Data_Matrix
message DataMatrixTicket {
    // String which is used to generate barcode from. Mandatory.
    string ticketBarcode = 1;

    // String which may be used to verify ticket manually in case if there is no connection for Data Matrix code scanner. Optional.
    string offlineCode = 2;
}

message BinaryTicket {
    //representation of ticket in bytes. Mandatory.
    bytes ticketContent = 1;
}

message Ticket {
    oneof ticket {
        // @see TicketType#BINARY
        BinaryTicket binaryTicket = 1;

        // @see TicketType#QR_CODE
        QrTicket qrTicket = 2;

        // @see TicketType#DATA_MATRIX
        DataMatrixTicket dataMatrixTicket = 3;
    }

    // For when ticket expiry dates are dynamic in the plugin and should override the one set in the platform. Optional.
    Date expiryDate = 4;
}

enum TicketType {
    // Should not be used explicitly.
    UNASSIGNED_TICKET_TYPE = 0;

    // @see BinaryTicket
    BINARY = 1;

    // @see QrTicket
    QR_CODE = 2;

    // @see DataMatrixTicket
    DATA_MATRIX = 3;
}

enum MeetingType {
    // Should not be used explicitly.
    UNASSIGNED_MEETING_TYPE = 0;

    // No pickup is offered
    MEET_ON_LOCATION = 1;

    // Pickup is optional
    MEET_ON_LOCATION_OR_PICK_UP = 2;

    // Pickup is mandatory
    PICK_UP = 3;
}

message PickupDropoffPlace {
    // Verbal description of pick up place. Mandatory.
    string title = 1;

    // Precise location of pick up place. Mandatory.
    Address address = 3;
}

// Parameters used to configure supported plugin(s)
message PluginConfigurationParameterValue {
    // refer to PluginConfigurationParameter::name
    string name = 1;

    // value for this name; null strings are not permitted by proto v3 but empty strings "" are
    string value = 2;
}

// represents a point in map.
message GeoPoint {
    double latitude = 1;
    double longitude = 2;
}

// Represents a location from the United Nations Code for Trade and Transport Locations (UN/LOCODE).
message UnLocode {
    // ISO 3166-1 alpha-2 string identifying the country part of the UN/LOCODE for this product.
    string country = 1;

    // A three letter String identifying the city part of the UN/LOCODE for this product.
    string city = 2;
}

message Address {
    string addressLine1 = 1;
    string addressLine2 = 2;
    string addressLine3 = 3;
    string city = 4;
    string state = 5;
    string postalCode = 6;
    string countryCode = 7;
    GeoPoint geoPoint = 8;
    UnLocode unLocode = 9;
}

message Place {
    string title = 1;
    Address address = 2;
}

message ReservationResponse {
    // should return either success or failure data structure. Mandatory (response must indicate either succees or failure).
    oneof reservationResult {
        SuccessfulReservation successfulReservation = 1;
        FailedReservation failedReservation = 2;
    }
}

message SuccessfulReservation {
    // Reservation code. Mandatory. Note: this might or might not differ from booking confirmation code, depending on plugin implementation.
    string reservationConfirmationCode = 1;
}

message FailedReservation {
    // Error message telling why this request has failed. Optional - remote end is not required to explicitly tell the reason of failure
    string reservationError = 1;
}

message ConfirmBookingResponse {
    // should return either success or failure data structure. Mandatory (response must indicate either succees or failure).
    oneof bookingResult {
        SuccessfulBooking successfulBooking = 1;
        FailedBooking failedBooking = 2;
    }
}

message SuccessfulBooking {
    // This may or may not overlap with ReservationResponse::reservationConfirmationCode, depending on the specifics of the remote plugin.
    // Either case, mandatory.
    string bookingConfirmationCode = 1;

    // Unset if plugin does not support tickets.
    oneof tickets {
        // Set if tickets were requested per passenger (yet delivered per pricing category).
        TicketsPerPricingCategory ticketsPerPassenger = 2;

        // Set if a single ticket-per-booking was requested.
        Ticket bookingTicket = 3;
    }
}

message TicketsPerPricingCategory {
    repeated TicketPerPricingCategory tickets = 1;
}

message TicketPerPricingCategory {
    // for which pricing category this ticket is for? May be unset if
    string pricingCategory = 1;

    // ticket for above mentioned pricing category. Mandatory.
    Ticket ticket = 2;
}

message FailedBooking {
    // Error message telling why this request has failed. Optional - remote end is not required to explicitly tell the reason of failure
    string bookingError = 1;
}

message CancelBookingResponse {
    // should return either success or failure data structure. Mandatory (response must indicate either succees or failure).
    oneof cancellationResult {
        SuccessfulCancellation successfulCancellation = 1;
        FailedCancellation failedCancellation = 2;
    }
}

message SuccessfulCancellation {
}

message FailedCancellation {
    // Error message telling why this request has failed. Optional - remote end is not required to explicitly tell the reason of failure
    string cancellationError = 1;
}

// All fields optional unless enforced in ProductDescription.
message Contact {
    string firstName = 1;

    string lastName = 2;

    // Such as Mr. or Mrs.
    Title title = 3;

    // This field may also contain multiple addresses separated by comma (as per RFC2822).
    string email = 4;

    // Phone including intl code, e.g. +447890123456.
    string phone = 5;

    // Language customer prefers to be contacted in. ISO ALPHA-2 code.
    string language = 6;

    // Passport holder of which country? ISO ALPHA-2 code
    string nationality = 7;

    // ISO ALPHA-2 code
    string country = 8;

    Gender gender = 9;

    // House/flat number + street + city of residence
    string address = 10;

    string postCode = 11;

    // Useful if booking for/via a company.
    string organization = 12;

    // Some unique id of the document instance.
    string passportNumber = 13;

    // When does a passport expire?
    Date passportExpiry = 14;
}

enum ContactField {
    UNASSIGNED_FIELD = 0;

    // see Contact::gender
    GENDER = 1;

    // Such as Mr. or Mrs.
    // see Contact::title
    TITLE = 2;

    // see Contact::firstName
    FIRST_NAME = 3;

    // see Contact::lastName
    LAST_NAME = 4;

    // see Contact::email
    EMAIL = 5;

    // see Contact::phone
    PHONE = 6;

    // see Contact::language
    LANGUAGE = 7;

    // see Contact::nationality
    NATIONALITY = 8;

    // see Contact::country
    COUNTRY = 9;

    // see Contact::organization
    ORGANIZATION = 10;

    // see Contact:address
    ADDRESS = 11;

    // see Contact:postCode
    POST_CODE = 12;

    // see Contact:passportNumber
    PASSPORT_NUMBER = 13;

    // see Contact:passportExpiry
    PASSPORT_EXPIRY = 14;
}

enum Title {
    // Should not be used explicitly.
    UNASSIGNED_TITLE = 0;

    MRS = 1;
    MISS = 2;
    MR = 3;
}

enum Gender {
    // Should not be used explicitly.
    UNASSIGNED_GENDER = 0;

    FEMALE = 1;
    MALE = 2;
}

message ProductAvailabilityWithRatesResponse {
    // How many slots are available for this day/time. Mandatory.
    int32 capacity = 1;

    // Date for when this product is available. Mandatory.
    Date date = 2;

    // When does this event start? Unset if this product does not support times.
    Time time = 3;

    // When does a pickup for this product start? Unset if this product does not support times or pickups.
    Time pickupTime = 4;

    // Rates with prices. Mandatory (should at least have one entry).
    repeated RateWithPrice rates = 5;
}

message RateWithPrice {
    // What rate ("12 hour rate", "24 hour rate"). Mandatory. If the remote end does not support rates, plugins should at least return some
    // superficial rate.
    string rateId = 1;

    // Depending on the rate settings, this should be priced either per person or per booking - one of two should be set.
    oneof pricingOptions {
        PricePerPerson pricePerPerson = 3;
        PricePerBooking pricePerBooking = 4;
    }
}

// When a rate is priced per person. Most common case.
message PricePerPerson {
    repeated PricingCategoryWithPrice pricingCategoryWithPrice = 1;
}

// In case this rate is priced per booking (often regardless how many travellers are coming).
// Or this can also represent a group rate, e.g. family ticket for 2 adults + 3 children.
message PricePerBooking {
    Price price = 1;
}

message PricingCategoryWithPrice {
    string pricingCategoryId = 1;
    Price price = 2;
}

message Reservation {
    // At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
    // Should match rate from, ProductDescription::rates of booked product.
    string rateId = 1;

    // Who will travel on this reservation? Mandatory for both price-per-person and price-per-booking cases.
    //
    // If purchasing for price-per-booking (e.g. 2 ADT + 3 CHD family ticket), Passenger should be repeated in order to list all pricing categories
    // booking this (2 ADT + 3 CHD) even though this is one family.
    //
    // If purchasing for price-per-person (e.g. 1 ADT + 1 CHD), Passenger should be repeated for each pricing category too, but with different
    // attributes set (see Passenger type for more information)
    repeated Passenger passengers = 2;

    // How much has been paid for this, in case this was priced per booking.
    // If this was priced per person, this field should be left unassigned.
    Price pricePerBooking = 3;

    //Extras associated with this reservation. Optional.
    repeated ExtraBooking extraBooking = 4;

}

// Passenger participating in a tour/activity event.
message Passenger {
    // What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory for both price-per-person
    // and price-per-booking cases.
    string pricingCategoryId = 1;

    // Contact of each passenger. Mandatory. Parts of this object may be enforced via ProductDescription::enforcedTravellerFields.
    Contact contact = 2;

    // Should only be set if priced per passenger. If priced per booking then this should be left unassigned.
    Price pricePerPassenger = 3;
}


// Extra available for certain product
message Extra {

    // Id of extra on external (non-Bokun) platform. Mandatory
    string id = 1;

    // Title of extra. Mandatory.
    string title = 2;

    // Description of extra. Optional.
    string description = 3;

    // If true, extra is optional for product. Mandatory
    bool optional = 4;

    // How many extras can be acquired per single booking. Optional
    int32 maxPerBooking = 6;

    // If true, max one item can be acquired by each passenger/activity actor/etc. Optional
    bool limitByPax = 7;

    //If true, this may increase capacity for a product. Optional.
    bool increasesCapacity = 8;

}

// Extra used in booking
message ExtraBooking {

    // Id of extra. Mandatory
    string extraId = 1;

    // Amount. Mandatory
    int32 amount = 2;

    // Extra per person or extra per booking?. Mandatory
    ExtraPricingType pricingType = 3;
}

// Data types for BookingChannel segment parameter
enum SalesSegment {
    UNASSIGNED_SALES_SEGMENT = 0;
    DIRECT_ONLINE = 1;
    DIRECT_OFFLINE = 2;
    AGENT_AREA = 3;
    MARKETPLACE = 4;
    OTA = 5;
}

// Booking channel used in Booking.bookingSource
message BookingSourceBookingChannel {

    // Channel ID. Mandatory
    string id = 1;

    // Title. Mandatory
    string title = 2;

    // System type. Optional. Filled when SalesSegment is OTA
    string systemType = 3;
}

// Extranet user who made booking. Used in Booking.bookingSource
message BookingSourceExtranetUser {

    // User email/username. Mandatory
    string email = 1;

    // User full name. Mandatory
    string fullName = 2;
}

// Booking agent used in Booking.bookingSource
message BookingSourceBookingAgent {

    // agent id. Mandatory
    string id = 1;

    // Title. Mandatory
    string title = 2;

    // Agent company registration number. Optional
    string companyRegistrationNumber = 3;

}

// Affiliate vendor used in Booking.bookingSource
message BookingSourceMarketplaceVendor {

    // vendor id. Mandatory
    string id = 1;

    // Vendor title. Mandatory
    string title = 2;

    // Vendor company registration number. Optional
    string companyRegistrationNumber = 3;

    // Reseller ID assigned in Marketplace Contract. Optional
    string contractResellerId = 4;
}

// Booking source used in booking
message BookingSource {

    // Booking sales segment. Mandatory
    SalesSegment segment = 1;

    // Booking channel. Obligatory
    BookingSourceBookingChannel bookingChannel = 2;

    // Extranet user who made the booking. Optional. Filled when SalesSegment is DIRECT_OFFLINE
    BookingSourceExtranetUser extranetUser = 3;

    // Agent who did the booking. Optional. Filled when SalesSegment is AGENT_AREA
    BookingSourceBookingAgent bookingAgent = 4;

    // Marketplace reseller who resold booking. Optional. Filled when SalesSegment is MARKETPLACE or OTA
    BookingSourceMarketplaceVendor marketplaceVendor = 5;
}

