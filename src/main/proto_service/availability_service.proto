syntax = "proto3";

package io.bokun.inventory.service.availability.grpc;

option java_multiple_files = true;
option java_package = "io.bokun.inventory.service.availability.grpc";

import "common.proto";
import "inventory_service_common.proto";

service AvailabilityService {
    // Get available products (of specific type) over a date range, supplying a set of Bokun product IDs.
    rpc FindAvailableProducts (FindAvailableProductsRequest) returns (stream io.bokun.inventory.service.common.grpc.BokunProduct) {}

    rpc GetProductAvailability (GetProductAvailabilityRequest) returns (stream ProductAvailabilityWithRatesResponse) {}
}

message FindAvailableProductsRequest {
    string pluginId = 1;                                                            // for which plugin definition (necessary to get plugin cfg)
    int64 vendorId = 2;                                                             // for which vendor (necessary to get plugin cfg)
    repeated io.bokun.inventory.service.common.grpc.BokunProduct products = 3;      // range of products we are looking in
    io.bokun.inventory.common.api.grpc.DatePeriod range = 4;                        // what date range are we searching for?
    int32 quantity = 5;                                                             // required quantity
}

message GetProductAvailabilityRequest {
    string pluginId = 1;                                                            // for which plugin definition (necessary to get plugin cfg)
    int64 vendorId = 2;                                                             // for which vendor (necessary to get plugin cfg)
    io.bokun.inventory.service.common.grpc.BokunProduct product = 3;
    io.bokun.inventory.common.api.grpc.DatePeriod range = 4;
}

message ProductAvailabilityWithRatesResponse {
    int32 capacity = 1;
    io.bokun.inventory.common.api.grpc.Date date = 2;
    io.bokun.inventory.common.api.grpc.Time time = 3;           // at what time this is departing?
    repeated RateWithPrice rates = 4;
}

message PricingCategoryWithPrice {
    io.bokun.inventory.service.common.grpc.PricingCategory pricingCategory = 1;
    io.bokun.inventory.common.api.grpc.PricingCategoryType pricingCategoryType = 2;
    io.bokun.inventory.common.api.grpc.Price price = 3;
}

message RateWithPrice {
    io.bokun.inventory.service.common.grpc.BokunToExternalMapping rate = 1;
    repeated PricingCategoryWithPrice pricingCategories = 2;
}
