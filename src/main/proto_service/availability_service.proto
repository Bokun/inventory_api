syntax = "proto3";

package io.bokun.inventory.service.availability.grpc;

option java_multiple_files = true;
option java_package = "io.bokun.inventory.service.availability.grpc";

import "common.proto";
import "inventory_service_common.proto";

service AvailabilityService {
    // Get available products (of specific type) over a date range, supplying a set of Bokun product IDs.
    // Returned set of Bokun product IDs will refer to available products; this will be a subset of requested products.
    rpc FindAvailableProducts (FindAvailableProductsRequest) returns (stream io.bokun.inventory.service.common.grpc.BokunProduct) {}

    // Get detailed info about requested single Bokun product.
    // This returns not only available dates/time but also pickup times as well as pricing for requested range.
    rpc GetProductAvailability (GetProductAvailabilityRequest) returns (stream io.bokun.inventory.common.api.grpc.ProductAvailabilityWithRatesResponse) {}
}

message FindAvailableProductsRequest {
    // Range of products we are looking in. Mandatory (must not be empty).
    // If any of given products is not mapped (inventory service is unaware of such product), it will be ignored.
    repeated io.bokun.inventory.service.common.grpc.BokunProduct products = 1;

    // What date range are we searching for? Mandatory.
    io.bokun.inventory.common.api.grpc.DatePeriod range = 2;

    // Required capacity. Mandatory.
    int32 capacity = 3;

    // for logging purposes only
    string requestId = 4;
}

message GetProductAvailabilityRequest {
    // For which Bokun product to find availability/prices for? Mandatory.
    io.bokun.inventory.service.common.grpc.BokunProduct product = 1;

    // For which range to find availability/prices for? Mandatory.
    io.bokun.inventory.common.api.grpc.DatePeriod range = 2;

    // for logging purposes only
    string requestId = 3;
}
