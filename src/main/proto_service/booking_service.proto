syntax = "proto3";

package io.bokun.inventory.service.booking.grpc;

option java_multiple_files = true;
option java_package = "io.bokun.inventory.service.booking.grpc";

import "common.proto";
import "inventory_service_common.proto";

service BookingService {
    // Reserve capacity for a product for limited time. Please using blocking API for this as the result of this is atomic: all requests should either
    // succeed or fail; there can be no half/success.
    rpc CreateReservation (ReservationRequest) returns (io.bokun.inventory.common.api.grpc.ReservationResponse) {}

    // Once reserved, proceed with booking.
    rpc ConfirmBooking (ConfirmBookingRequest) returns (io.bokun.inventory.common.api.grpc.ConfirmBookingResponse) {}
}

message ConfirmBookingRequest {
    // For which plugin definition (necessary to get plugin cfg). Mandatory.
    string pluginId = 1;

    // For which vendor (necessary to get plugin cfg). Mandatory.
    int64 vendorId = 2;

    // Exactly as returned by io.bokun.inventory.common.api.grpc.ReservationResponse::reservationConfirmationCode. Mandatory.
    string reservationConfirmationCode = 3;

    // What kind of tickets do you want the remote end to generate? This must be supported by a booked product, see ProductDescription::ticketSupport
    // Mandatory.
    io.bokun.inventory.common.api.grpc.TicketSupport ticketingType = 4;
}

message ReservationRequest {
    // products, *exactly* as used with CreateReservation request
    repeated io.bokun.inventory.service.common.grpc.BokunProduct bokunProducts = 1;

    // Contact of the customer who has reserved this booking. Mandatory.
    io.bokun.inventory.common.api.grpc.Contact customerContact = 2;

    // The actual reservation(s). Mandatory; should at least have one reservation in the request.
    repeated ProductReservation reservations = 3;
}

message ProductReservation {
    // Product category in Bokun. Mandatory.
    io.bokun.inventory.common.api.grpc.ProductCategory productCategory = 1;

    // Product ID in Bokun. Mandatory.
    int64 productId = 2;

    // Notes captured by a person who entered this booking (may also be customer itself if booked online). Optional.
    string notes = 3;

    // Vendors might optionally want to store scanned barcode value with this booking.
    string barcode = 4;

    // Day of the event should take place. Mandatory.
    // Must match available date, as provided provided with ProductAvailabilityWithRatesResponse::date
    io.bokun.inventory.common.api.grpc.Date date = 5;

    // Desired start time. Mandatory if ProductDescription::bookingType is DATE_AND_TIME, otherwise null.
    // Must match available time, as provided with ProductAvailabilityWithRatesResponse::time
    io.bokun.inventory.common.api.grpc.Time time = 6;

    // Whether pickup is required. Only relevant if ProductDescription::pickupAvailable of booked product is true.
    bool pickupRequired = 7;

    oneof pickupPlace {
        // Custom pickup location. Only relevant if ProductDescription::pickupAvailable and ProductDescription::customPickupPlaceAllowed are true and
        // if customer actually wants custom location.
        string customPickupPlace = 8;

        // Pickup location. Only relevant if ProductDescription::pickupAvailable is true. Should only be set if ::pickupRequired is true.
        // Should match location from ProductDescription::pickupPlaces of booked product.
        io.bokun.inventory.common.api.grpc.PickupDropoffPlace predefinedPickupPlace = 9;
    }

    // Whether drop off is required. Only relevant if ProductDescription::dropoffAvailable of booked product is true.
    bool dropoffRequired = 10;

    oneof dropoffPlace {
        // Custom drop off location. Only relevant if ProductDescription::dropoffAvailable and ProductDescription::customDropoffPlaceAllowed are true and
        // if customer actually wants custom location.
        string customDropoffPlace = 11;

        // Drop off location. Only relevant if ProductDescription::dropoffAvailable is true. Should only be set if ::dropoffRequired is true.
        // Should match location from ProductDescription::dropoffPlaces of booked product.
        io.bokun.inventory.common.api.grpc.PickupDropoffPlace predefinedDropoffPlace = 12;
    }

    // At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
    // Should match rate from, ProductDescription::rates of booked product.
    io.bokun.inventory.common.api.grpc.Rate rate = 13;

    // What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory.
    io.bokun.inventory.common.api.grpc.PricingCategory pricingCategory = 14;

    // how many people booked for this rate/pricing category. Mandatory.
    int32 pax = 15;

    // Who will be travelling / taking part in this activity -- for this rate & pricing category. Remote end might not require this, but platform is
    // expected to send the data anyway. Number of records must match <tt>pax</tt>.
    repeated io.bokun.inventory.common.api.grpc.Contact participants = 16;
}
