syntax = "proto3";

package io.bokun.inventory.service.booking.grpc;

option java_multiple_files = true;
option java_package = "io.bokun.inventory.service.booking.grpc";

import "common.proto";
import "inventory_service_common.proto";

service BookingService {
    // Reserve capacity for a product for limited time. Please using blocking API for this as the result of this is atomic: all requests should either
    // succeed or fail; there can be no half/success.
    rpc CreateReservation (ReservationRequest) returns (stream ReservationResponse) {}
}

message ReservationRequest {
    string pluginId = 1;                                                            // for which plugin definition (necessary to get plugin cfg)
    int64 vendorId = 2;                                                             // for which vendor (necessary to get plugin cfg)
    Contact customer = 3;
    repeated ProductReservation reservations = 4;
}

message Contact {
    // First name. Mandatory.
    string firstName = 1;

    // Last name. Mandatory.
    string lastNamed = 2;

    // Title, optional.
    string title = 3;

    // Optional email address. It is also possible to store multiple addresses in this field, separated by comma (as per RFC2822).
    string email = 4;

    // Phone including intl code. Optional.
    string phone = 5;

    // Language customer prefers to be contacted in. Optional.
    string language = 6;

    // ISO 3166-1 Alpha-3 code, see https://en.wikipedia.org/wiki/ISO_3166-1. Optional.
    string nationality = 7;
}

message ProductReservation {
    // Product category in Bokun. Mandatory.
    io.bokun.inventory.common.api.grpc.ProductCategory productCategory = 1;

    // Product ID in Bokun. Mandatory.
    int64 productId = 2;

    // Notes captured by a person who entered this booking (may also be customer itself if booked online). Optional.
    string notes = 3;

    // Vendors might optionally want to store scanned barcode value with this booking.
    string barcode = 4;

    // Day of the event should take place. Mandatory.
    // Must match available date, as provided provided with ProductAvailabilityWithRatesResponse::date
    io.bokun.inventory.common.api.grpc.Date date = 5;

    // Desired start time. Mandatory if ProductDescription::bookingType is DATE_AND_TIME, otherwise null.
    // Must match available time, as provided with ProductAvailabilityWithRatesResponse::time
    io.bokun.inventory.common.api.grpc.Time time = 6;

    // Whether pickup is required. Only relevant if ProductDescription::pickupAvailable of booked product is true.
    bool pickupRequired = 7;

    // Custom pickup location. Only relevant if ProductDescription::pickupAvailable and ProductDescription::customPickupPlaceAllowed are true and
    // if customer actually wants custom location. ::pickupPlace should be null if this is set.
    string customPickupPlace = 8;

    // Pickup location. Only relevant if ProductDescription::pickupAvailable is true. Should not be set if ::customPickupPlace is set.
    // Should only be set if ::pickupRequired is true. Should match location from ProductDescription::pickupPlaces of booked product.
    io.bokun.inventory.common.api.grpc.PickupDropoffPlace pickupPlace = 9;

    // Whether drop off is required. Only relevant if ProductDescription::dropoffAvailable of booked product is true.
    bool dropoffRequired = 10;

    // Custom drop off location. Only relevant if ProductDescription::dropoffAvailable and ProductDescription::customDropoffPlaceAllowed are true and
    // if customer actually wants custom location. ::dropoffPlace should be null if this is set.
    string customDropoffPlace = 11;

    // Drop off location. Only relevant if ProductDescription::dropoffAvailable is true. Should not be set if ::customDropoffPlace is set.
    // Should only be set if ::dropoffRequired is true. Should match location from ProductDescription::dropoffPlaces of booked product.
    io.bokun.inventory.common.api.grpc.PickupDropoffPlace dropoffPlace = 12;

    // At what rate ("12 hour rate", "24 hour rate" etc.) this is booked. Refers to a rate in Bokun. Mandatory.
    // Should match rate from, ProductDescription::rates of booked product.
    io.bokun.inventory.common.api.grpc.Rate rate = 13;

    // What kind of pricing category (Adult, Child, etc.) this is booked. Refers to a pricing category in Bokun. Mandatory.
    io.bokun.inventory.common.api.grpc.PricingCategory pricingCategory = 14;

    // how many people booked for this rate/pricing category. Mandatory.
    int32 pax = 15;
}

message ReservationResponse {
    // true if reservation request has been successful, false otherwise
    bool success = 1;

    oneof reservationResult {
        // set if success=true
        SuccessfulReservation successfulReservation = 2;

        // set if success=false
        FailedReservation failedReservation = 3;
    }
}

message SuccessfulReservation {
    // Reservation code. Mandatory.
    string confirmationCode = 1;
}

message FailedReservation {
    // Error message telling why this request has failed. Optional - remote end is not required to explicitly tell the reason of failure
    string reservationError = 1;
}
