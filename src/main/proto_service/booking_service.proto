syntax = "proto3";

package io.bokun.inventory.service.booking.grpc;

option java_multiple_files = true;
option java_package = "io.bokun.inventory.service.booking.grpc";

import "common.proto";
import "inventory_service_common.proto";

service BookingService {
    // Reserve capacity for a product for limited time. Please using blocking API for this as the result of this is atomic: all requests should either
    // succeed or fail; there can be no half/success.
    //
    // The two step process (this method + ConfirmBooking) is only called if PluginDefinition::capabilities contains SUPPORTS_RESERVATIONS, otherwise
    // CreateAndConfirmBooking method is used instead of both.
    rpc CreateReservation (ReservationRequest) returns (io.bokun.inventory.common.api.grpc.ReservationResponse) {}

    // Once reserved, proceed with booking.
    //
    // The two step process (CreateReservation + this method) is only called if PluginDefinition::capabilities contains SUPPORTS_RESERVATIONS,
    // otherwise CreateAndConfirmBooking method is used instead of both.
    rpc ConfirmBooking (ConfirmBookingRequest) returns (io.bokun.inventory.common.api.grpc.ConfirmBookingResponse) {}

    // This creates reservation and makes a booking in one step.
    //
    // This method is only called by the platform if PluginDefinition::capabilities does not contain SUPPORTS_RESERVATIONS value.
    // Otherwise, two step process (CreateReservation + ConfirmBooking) is used, which is the recommended option.
    rpc CreateAndConfirmBooking (CreateConfirmBookingRequest) returns (io.bokun.inventory.common.api.grpc.ConfirmBookingResponse) {}

    // Once booked, a booking may be cancelled using booking ref number.
    rpc CancelBooking (CancelBookingRequest) returns (io.bokun.inventory.common.api.grpc.CancelBookingResponse) {}
}

message ConfirmBookingRequest {
    // product, *exactly* as used with CreateReservation request. Mandatory.
    io.bokun.inventory.service.common.grpc.BokunProduct bokunProduct = 1;

    // Exactly as returned by io.bokun.inventory.common.api.grpc.SuccessfulReservation::reservationConfirmationCode. Mandatory.
    string reservationConfirmationCode = 2;

    // What kind of tickets do you want the remote end to generate? This must be supported by a booked product, see ProductDescription::ticketSupport
    // Mandatory.
    io.bokun.inventory.common.api.grpc.TicketSupport ticketingType = 3;
}

message CancelBookingRequest {
    // product, *exactly* as used with CreateReservation request. Mandatory.
    io.bokun.inventory.service.common.grpc.BokunProduct bokunProduct = 1;

    // Exactly as returned by io.bokun.inventory.common.api.grpc.SuccessfulBooking::bookingConfirmationCode. Mandatory.
    string bookingConfirmationCode = 2;
}

message ReservationRequest {
    // Product category in Bokun. Mandatory.
    io.bokun.inventory.common.api.grpc.ProductCategory productCategory = 1;

    // Product ID in Bokun. Mandatory.
    int64 productId = 2;

    // Contact of the customer who has reserved this booking (otherwise known as "lead customer"). Mandatory.
    io.bokun.inventory.common.api.grpc.Contact customerContact = 3;

    // Notes captured by a person who entered this booking (may also be customer itself if booked online). Optional.
    string notes = 4;

    // Day of the event should take place. Mandatory for all but PASS type activities.
    // Must match available date, as provided provided with ProductAvailabilityWithRatesResponse::date
    io.bokun.inventory.common.api.grpc.Date date = 5;

    // Desired start time. Mandatory if ProductDescription::bookingType is DATE_AND_TIME, otherwise null.
    // Must match available time, as provided with ProductAvailabilityWithRatesResponse::time
    io.bokun.inventory.common.api.grpc.Time time = 6;

    // Whether pickup is required. Only relevant if ProductDescription::pickupAvailable of booked product is true.
    bool pickupRequired = 7;

    oneof pickupPlace {
        // Custom pickup location. Only relevant if ProductDescription::pickupAvailable and ProductDescription::customPickupPlaceAllowed are true and
        // if customer actually wants custom location.
        string customPickupPlace = 8;

        // Pickup location. Only relevant if ProductDescription::pickupAvailable is true. Should only be set if ::pickupRequired is true.
        // Should match location from ProductDescription::pickupPlaces of booked product.
        io.bokun.inventory.common.api.grpc.PickupDropoffPlace predefinedPickupPlace = 9;
    }

    // Whether drop off is required. Only relevant if ProductDescription::dropoffAvailable of booked product is true.
    bool dropoffRequired = 10;

    oneof dropoffPlace {
        // Custom drop off location. Only relevant if ProductDescription::dropoffAvailable and ProductDescription::customDropoffPlaceAllowed are true and
        // if customer actually wants custom location.
        string customDropoffPlace = 11;

        // Drop off location. Only relevant if ProductDescription::dropoffAvailable is true. Should only be set if ::dropoffRequired is true.
        // Should match location from ProductDescription::dropoffPlaces of booked product.
        io.bokun.inventory.common.api.grpc.PickupDropoffPlace predefinedDropoffPlace = 12;
    }

    // Reservations for this request. Each reservation should be formed for concrete pricing category, rate and product
    repeated io.bokun.inventory.common.api.grpc.Reservation reservations = 13;

    // This is some unique id which is taken from the platform for this reservation. Plugins may ignore it, or may use this field in order
    // to make backrefrence from their own reservation/booking towards platform reservation/booking.
    string platformId = 14;
}

message CreateConfirmBookingRequest {
    // Product category in Bokun. Mandatory.
    io.bokun.inventory.common.api.grpc.ProductCategory productCategory = 1;

    // Product ID in Bokun. Mandatory.
    int64 productId = 2;

    // Contact of the customer who has reserved this booking (otherwise known as "lead customer"). Mandatory.
    io.bokun.inventory.common.api.grpc.Contact customerContact = 3;

    // Notes captured by a person who entered this booking (may also be customer itself if booked online). Optional.
    string notes = 4;

    // Day of the event should take place. Mandatory for all but PASS type activities.
    // Must match available date, as provided provided with ProductAvailabilityWithRatesResponse::date
    io.bokun.inventory.common.api.grpc.Date date = 5;

    // Desired start time. Mandatory if ProductDescription::bookingType is DATE_AND_TIME, otherwise null.
    // Must match available time, as provided with ProductAvailabilityWithRatesResponse::time
    io.bokun.inventory.common.api.grpc.Time time = 6;

    // Whether pickup is required. Only relevant if ProductDescription::pickupAvailable of booked product is true.
    bool pickupRequired = 7;

    oneof pickupPlace {
        // Custom pickup location. Only relevant if ProductDescription::pickupAvailable and ProductDescription::customPickupPlaceAllowed are true and
        // if customer actually wants custom location.
        string customPickupPlace = 8;

        // Pickup location. Only relevant if ProductDescription::pickupAvailable is true. Should only be set if ::pickupRequired is true.
        // Should match location from ProductDescription::pickupPlaces of booked product.
        io.bokun.inventory.common.api.grpc.PickupDropoffPlace predefinedPickupPlace = 9;
    }

    // Whether drop off is required. Only relevant if ProductDescription::dropoffAvailable of booked product is true.
    bool dropoffRequired = 10;

    oneof dropoffPlace {
        // Custom drop off location. Only relevant if ProductDescription::dropoffAvailable and ProductDescription::customDropoffPlaceAllowed are true and
        // if customer actually wants custom location.
        string customDropoffPlace = 11;

        // Drop off location. Only relevant if ProductDescription::dropoffAvailable is true. Should only be set if ::dropoffRequired is true.
        // Should match location from ProductDescription::dropoffPlaces of booked product.
        io.bokun.inventory.common.api.grpc.PickupDropoffPlace predefinedDropoffPlace = 12;
    }

    // Reservations for this request. Each reservation should be formed for concrete pricing category, rate and product
    repeated io.bokun.inventory.common.api.grpc.Reservation reservations = 13;

    // This is some unique id which is taken from the platform for this reservation. Plugins may ignore it, or may use this field in order
    // to make backrefrence from their own reservation/booking towards platform reservation/booking.
    string platformId = 14;

    // What kind of tickets do you want the remote end to generate? This must be supported by a booked product, see ProductDescription::ticketSupport
    // Mandatory.
    io.bokun.inventory.common.api.grpc.TicketSupport ticketingType = 15;
}
