syntax = "proto3";

package io.bokun.inventory.service;

option java_multiple_files = true;
option java_package = "io.bokun.inventory.service.grpc";

import "common.proto";
import "inventory_service_common.proto";

service PluginService {
    // registers a new plugin to the system by given url
    rpc RegisterPlugin (PluginUrl) returns (PluginDefinition) {}

    // unregisters existing plugin from the system by given url which was previously registered with RegisterPlugin
    rpc UnregisterPlugin (PluginUnregistrationRequest) returns (io.bokun.inventory.plugin.api.Empty) {}

    // List definitions which are available for given vendor
    rpc ListDefinitions (VendorId) returns (stream PluginDefinition) {}

    rpc ConfigurePlugin (PluginConfigurationRequest) returns (PluginConfiguration) {}   // Configure new or existing plugin
    rpc ListConfiguredPlugins (VendorId) returns (stream PluginConfiguration) {}        // List all configured plugins
    rpc DeleteConfiguredPlugin (PluginId) returns (io.bokun.inventory.plugin.api.Empty) {}                            // Delete configured plugin
}

message PluginUrl {
    string url = 1;
}

// As this is Bokun-internal API, we add a few more fields to the plugin definition which is set externally
message PluginDefinition {
    string id = 1;
    string url = 2;
    io.bokun.inventory.plugin.api.PluginDefinition definition = 3;
}

message PluginUnregistrationRequest {
    string id = 1;          // unregister by either id or url, whichever comes first
    string url = 2;
}

message PluginConfigurationRequest {
    VendorId vendorId = 1;
    PluginId pluginId = 2;        // if absent, a new plugin will be created. Otherwise existing plugin will be used
    repeated PluginConfigurationParameterValue parameterValues = 3;
}

message PluginConfiguration {
    PluginId pluginId = 1;
    string definitionId = 2;
    repeated PluginConfigurationParameterValue parameterValues = 3;
}

// request to configure PluginConfigurationParameter
message PluginConfigurationParameterValue {
    string id = 1;      // PluginConfigurationParameter::id
    string value = 2;   // if the underlying PluginParameterDataType is not string, one of .parseX methods will be used
}
