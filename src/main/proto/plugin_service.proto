syntax = "proto3";

package io.bokun.inventory.service.plugin.grpc;

option java_multiple_files = true;
option java_package = "io.bokun.inventory.service.plugin.grpc";

import "common.proto";
import "inventory_service_common.proto";

service PluginService {
    // registers a new plugin to the system by given url
    rpc RegisterPlugin (PluginUrl) returns (PluginDefinition) {}

    // unregisters existing plugin from the system by given url which was previously registered with RegisterPlugin
    rpc UnregisterPlugin (PluginUnregistrationRequest) returns (io.bokun.inventory.common.grpc.Empty) {}

    // List definitions which are available for given vendor
    rpc ListDefinitions (io.bokun.inventory.service.common.grpc.VendorId) returns (stream PluginDefinition) {}

    // Configure new or existing plugin
    rpc ConfigurePlugin (PluginConfiguration) returns (PluginConfiguration) {}

    // List all configured plugins for given vendor
    rpc ListConfiguredPlugins (io.bokun.inventory.service.common.grpc.VendorId) returns (stream PluginConfiguration) {}

    // Delete configured plugin for a vendor
    rpc DeleteConfiguredPlugin (DeletePluginConfigurationRequest) returns (io.bokun.inventory.common.grpc.Empty) {}
}

message PluginUrl {
    string url = 1;
}

// As this is Bokun-internal API, we add a few more fields to the plugin definition which is publicly traded
message PluginDefinition {
    string id = 1;
    string url = 2;
    string name = 3;                                                                    // name of definition
    string description = 4;                                                             // description of definition, optional
    repeated io.bokun.inventory.common.grpc.ProductCategory productCategories = 5;      // Which product types does this plugin work with?
    repeated io.bokun.inventory.common.grpc.PluginCapability capabilities = 6;          // What does this plugin support?
    repeated PluginConfigurationParameter parameters = 7;                               // List of parameters this plugin should be configured with
}

// As this is Bokun-internal API, we add a few more fields to the plugin conf parameter which is publicly traded
message PluginConfigurationParameter {
    string id = 1;
    string name = 2;
    io.bokun.inventory.common.grpc.PluginParameterDataType type = 3;
    bool required = 4;
}

message PluginUnregistrationRequest {
    string id = 1;          // unregister by either id or url, whichever comes first
    string url = 2;
}

message PluginConfiguration {
    string vendorId = 1;
    int64 pluginId = 2;        // if absent, a new plugin will be created. Otherwise existing plugin will be used
    repeated PluginConfigurationParameterValue parameterValues = 3;
}

message DeletePluginConfigurationRequest {
    string vendorId = 1;
    int64 pluginId = 2;
}

// request to configure PluginConfigurationParameter, or response for already existing configuration
message PluginConfigurationParameterValue {
    string id = 1;                      
    string configParameterId = 2;       // PluginConfigurationParameter::id
    string value = 3;                   // if the underlying PluginParameterDataType is not string, one of .parseX methods should be used on the client end
}
